View(data)
help(rpart)
View(data)
source('~/Movie_DF/Experiments.R')
View(data)
names(data)
source('~/Movie_DF/Experiments.R')
help("subset")
help(subset)
??subset
?subset
source('~/Movie_DF/Experiments.R')
help("predict")
source('~/Movie_DF/Experiments.R')
View(data)
source('~/Movie_DF/Experiments.R')
sample(data, 1)
source('~/Movie_DF/Experiments.R')
sample(data, 1)
sample(data, size = 1)
sample(data)
sample(data, 10)
sample(data, 10)
sample(data, 1)
sample(data, 100)
sample(data, 10)
sample(data, 1)
sample(data, 10)
sample(data, 100)
sample(data, 90)
sample(data, 50)
sample(data, 1)
sample(data, 2)
sample(data, 1)
sample(data, 3)
sample(data, 4)
sample(data, 5)
sample(data, 6)
sample(data, 7)
sample(data, 8)
sample(data, 9)
sample(data, 10)
sample(data, 11)
sample(data, 12)
sample(data, 11)
sample(data, 11)[1]
sample(data, 11)
View(sample(data, 11))
View(sample(data, 2))
data[sample.int(nrow(data), 10),]
View(data[sample.int(nrow(data), 10),])
View(data[sample.int(nrow(data), 1), -c(Box, "Title")])
View(data[sample.int(nrow(data), 1), -c("Box", "Title")])
View(data[sample.int(nrow(data), 1), -c(Box, Title)])
View(data[sample.int(nrow(data), 1), -c(1,2)])
View(data[sample.int(nrow(data), 10), -c(1,2)])
source('~/Movie_DF/Experiments.R')
data[sample.int(nrow(data), 10), -c(1,2)]
data[sample.int(nrow(data), 1), -c(1,2)]
as.vector(data[sample.int(nrow(data), 1), -c(1,2)])
as.vector(data[sample.int(nrow(data), 1), -c(1,2)])
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
decision_tree_pred
source('~/Movie_DF/Experiments.R')
decision_tree_pred
as.vector(data[sample.int(nrow(data), 1), -c(1,2)])
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
decision_tree_pred
View(subData)
source('~/Movie_DF/Experiments.R')
glm_pred
source('~/Movie_DF/Experiments.R')
glm_pred
l
source('~/Movie_DF/Experiments.R')
l
glm_pred
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
lm_pred
data[sample.int(nrow(data), 1), -c(1,2)]
decision_tree_pred
source('~/Movie_DF/Experiments.R')
lm_pred
source('~/Movie_DF/Experiments.R')
lm_pred
source('~/Movie_DF/Experiments.R')
lm_pred
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
lm_pred
source('~/Movie_DF/Experiments.R')
lm_pred
source('~/Movie_DF/Experiments.R')
lm_pred
decision_tree_pred
subData
subData$Box
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
summary(decision_tree)
source('~/Movie_DF/Experiments.R')
View(data)
View(data)
View(data)
View(data)
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
rm(list=ls(all=TRUE))
require(rpart)
require(rpart.plot)
require(ggplot2)
require(plyr)
rankData <- function(X, c, n=10) {
freq <- count(X[, c])
freq <- freq[order(freq[,2], decreasing = TRUE), ][1:n,]
activate <- factor(freq$x)
return(X[X[,c] %in% activate, ])
}
data <- read.csv('./Youtubelist.csv', header=TRUE)
data <- subset(data, select= -c(X, Path) )
observations <- summary(data)
decision_tree = rpart(Box ~ Release.Date+Runtime+MPAA+Budget+FB_likes+YoutubeViews, data=data)
rpart.plot(decision_tree)
summary(decision_tree)
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
p <- ggplot(subset(data, !is.na(dnames[i])), aes(x=dnames[i])) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
ftypes = c(3,4,5,7,9)
fnames = names(data)[ftypes]
for(i in 1:length(ftypes)) {
counts <- count(subset(data, !is.na(fnames[i]))$fnames[i])
p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')
plot(p)
}
movie_aov <- aov(data = data, Box ~ Runtime * Budget * FB_likes * YoutubeViews )
summary_movie_aov <- summary(movie_aov)
summary_movie_aov
## 測試的結果： Box ~ Budge (預算會影響票房)
## 因為 p < 0.05
## 而不能確定 Box ~ YoutubeViews  (Youtube 播放數對票房)
## 還有       Box ~ FB_likes      (FB 按讚數對票房)
## 還有       Box ~ Runtime       (電影長度對票房)
## 個別的影響，因為
## FB_likes:YoutubeViews, FB_likes:Runtime, FB_likes:YoutubeViews:Runtime
## 是顯著的，所以我們只能假設，FB 按讚數、Youtube 瀏覽數、電影時長的組合，會影響電影票房
subset(data, !is.na(dnames[i]))
dnames[i]
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
p <- ggplot(subset(data, !is.na(dnames[i])), aes(x=dnames[i])) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
i=1
subset(data, !is.na(dnames[i]))
for(i in 1:length(dtypes)) {
p <- ggplot(subset(data, !is.na(dnames[i])), aes(x=str(dnames[i]))) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
for(i in 1:length(dtypes)) {
p <- ggplot(subset(data, !is.na(dnames[i])), aes(x=dnames[i])) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
source('~/Movie_DF/Experiments.R')
for(i in 1:length(dtypes)) {
p <- ggplot(subset(data, !is.na(dnames[i])), aes(x=data$dnames[i])) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
temp = data.frame(x = subset(data, !is.na(dnames[i]))$dnames[i])
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
for(i in 1:length(dtypes)) {
temp = data.frame(x = subset(data, !is.na(dnames[i]))$dnames[i])
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
subset(data, !is.na(dnames[i]))$dnames[i]
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame(x = subset(data, !is.na(dnames[i]))$dnames[i])
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
subset(data, !is.na(dnames[i]))$dnames[i]
subset(data, !is.na(dnames[i]))
subset(data, !is.na(dnames[i]))
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame(x = subset(data, !is.na(dnames[i])))
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame('x' = subset(data, !is.na(dnames[i])))
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
subset(data, !is.na(dnames[i]))
subset(data, !is.na(dnames[i]))[dtypes[i]]
temp = data.frame('x' = subset(data, !is.na(dnames[i]))[dtypes[i]])
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame('x' = subset(data, !is.na(dnames[i]))[dtypes[i]])
p <- ggplot(temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
for(i in 1:length(dtypes)) {
temp = data.frame('x' = subset(data, !is.na(dnames[i]))[dtypes[i]])
p <- ggplot(data = temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
View(temp)
temp = data.frame(x = subset(data, !is.na(dnames[i]))[dtypes[i]])
View(temp)
temp = data.frame(x = as.vector(subset(data, !is.na(dnames[i]))[dtypes[i]]))
View(temp)
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame(subset(data, !is.na(dnames[i]))[dtypes[i]])
names(temp) = c('x')
p <- ggplot(data = temp, aes(x=x)) + geom_density()
#p_log <- p + scale_x_log10()
plot(p)
#plot(p_log)
}
for(i in 1:length(dtypes)) {
temp = data.frame(subset(data, !is.na(dnames[i]))[dtypes[i]])
names(temp) = c('x')
p <- ggplot(data = temp, aes(x=x)) + geom_density() + xlab(dnames[i])
p_log <- p + scale_x_log10()
plot(p)
plot(p_log)
}
subset(data, !is.na(fnames[i]))
ftypes = c(3,4,5,7,9)
fnames = names(data)[ftypes]
for(i in 1:length(ftypes)) {
counts <- count(subset(data, !is.na(fnames[i]))$fnames[i])
p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')
plot(p)
}
subset(data, !is.na(fnames[i]))
subset(data, !is.na(fnames[i]))[ftypes[i]]
counts <- count(subset(data, !is.na(fnames[i]))[ftypes[i]])
View(counts)
ftypes = c(3,4,5,7,9)
fnames = names(data)[ftypes]
for(i in 1:length(ftypes)) {
counts <- count(subset(data, !is.na(fnames[i]))[ftypes[i]])
p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')
plot(p)
}
counts <- count(subset(data, !is.na(fnames[i]))[ftypes[i]])
View(counts)
ftypes = c(3,4,5,7,9)
fnames = names(data)[ftypes]
for(i in 1:length(ftypes)) {
counts <- count(subset(data, !is.na(fnames[i]))[ftypes[i]])
names(counts) <- c('x', 'freq')
p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')
plot(p)
}
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
rm(list=ls(all=TRUE))
require(rpart)
require(rpart.plot)
require(ggplot2)
require(plyr)
rankData <- function(X, c, n=10) {
freq <- count(X[, c])
freq <- freq[order(freq[,2], decreasing = TRUE), ][1:n,]
activate <- factor(freq$x)
return(X[X[,c] %in% activate, ])
}
data <- read.csv('./Youtubelist.csv', header=TRUE)
data <- subset(data, select= -c(X, Path) )
observations <- summary(data)
decision_tree = rpart(Box ~ Release.Date+Runtime+MPAA+Budget+FB_likes+YoutubeViews, data=data)
rpart.plot(decision_tree)
summary(decision_tree)
dtypes = c(2,6,8,10,11)
dnames = names(data)[dtypes]
for(i in 1:length(dtypes)) {
temp = data.frame(subset(data, !is.na(dnames[i]))[dtypes[i]])
names(temp) = c('x')
p <- ggplot(data = temp, aes(x=x)) + geom_density() + xlab(dnames[i])
p_log <- p + scale_x_log10()
plot(p)
plot(p_log)
}
ftypes = c(3,4,5,7,9)
fnames = names(data)[ftypes]
for(i in 1:length(ftypes)) {
counts <- count(subset(data, !is.na(fnames[i]))[ftypes[i]])
names(counts) <- c('x', 'freq')
p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency') + xlim(c(1,100))
plot(p)
}
movie_aov <- aov(data = data, Box ~ Runtime * Budget * FB_likes * YoutubeViews )
summary_movie_aov <- summary(movie_aov)
summary_movie_aov
## 測試的結果： Box ~ Budge (預算會影響票房)
## 因為 p < 0.05
## 而不能確定 Box ~ YoutubeViews  (Youtube 播放數對票房)
## 還有       Box ~ FB_likes      (FB 按讚數對票房)
## 還有       Box ~ Runtime       (電影長度對票房)
## 個別的影響，因為
## FB_likes:YoutubeViews, FB_likes:Runtime, FB_likes:YoutubeViews:Runtime
## 是顯著的，所以我們只能假設，FB 按讚數、Youtube 瀏覽數、電影時長的組合，會影響電影票房
source('~/Movie_DF/Experiments.R')
?scale_x_discrete
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
View(counts)
subset(data, !is.na(fnames[i]))
subset(data, !is.na(fnames[i]))[ftypes[i]]
data[,1]
source('~/Movie_DF/Experiments.R')
subset(data, !is.na(dnames[i]))[,dtypes[i]
]
View(temp)
source('~/Movie_DF/Experiments.R')
subset(data, !is.na(fnames[i]))[,ftypes[i]]
data[!is.na(data[ftypes[i]]),ftypes[i]]
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
mean(temp$x)
source('~/Movie_DF/Experiments.R')
summary(temp$x)
source('~/Movie_DF/Experiments.R')
summary(temp$x)
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
summary(temp$x)
source('~/Movie_DF/Experiments.R')
install.packages("modeest")
require(modeest)
help("modeest")
library(help = 'modeest')
source('~/Movie_DF/Experiments.R')
tmany
factor(tmany)
source('~/Movie_DF/Experiments.R')
tmany[1]
source('~/Movie_DF/Experiments.R')
as.numeric(tmany[1])
tmany[1]
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
source('~/Movie_DF/Experiments.R')
observations
source('~/Movie_DF/Experiments.R')
View(data)
source('~/Movie_DF/Experiments.R')
range(10)
source('~/Statistics_Final/Movie_DF/Experiments.R')
train_idx
-train_idx
valid_data <- data[-train_idx,]
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
View(valid_data)
source('~/Statistics_Final/Movie_DF/Experiments.R')
pred
source('~/Statistics_Final/Movie_DF/Experiments.R')
View(valid_data)
View(valid_data)
View(valid_data)
source('~/Statistics_Final/Movie_DF/Experiments.R')
decision_tree_acc
tl_rt_err
source('~/Statistics_Final/Movie_DF/Experiments.R')
tl_rt_err
decision_tree_acc
source('~/Statistics_Final/Movie_DF/Experiments.R')
tl_rt_err
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
sum(is.na(data$Release.Date)
)
sum(is.na(data$Release.Date))
sum(is.na(data$Runtime))
sum(is.na(data$MPAA))
sum(is.na(data$Budget))
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
summary_movie_aov
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
require(plyr)
t <- count(data$Box)
View(t)
boxplot(x=t$x, y=t$freq)
boxplot(x=t$x, y=t$freq, outline = FALSE)
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
source('~/Statistics_Final/Movie_DF/Experiments.R')
rpart.plot(decision_tree)
require(rpart.plot)
rpart.plot(decision_tree)
rpart.plot(regression_tree)
median(c(1,3,2,5,4))
?median
median(c(1,4,2,5,3))
