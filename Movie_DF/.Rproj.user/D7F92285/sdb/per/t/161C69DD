{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\nrequire(rpart)\nrequire(rpart.plot)\nrequire(ggplot2)\nrequire(plyr)\n\nrankData <- function(X, c, n=10) {\n  freq <- count(X[, c])\n  freq <- freq[order(freq[,2], decreasing = TRUE), ][1:n,]\n  activate <- factor(freq$x)\n  return(X[X[,c] %in% activate, ])\n}\n\nfind_mode <- function(x) {\n  return(names(table(x)[table(x)%in%max(table(x))]))\n}\n\ndata <- read.csv('./Youtubelist.csv', header=TRUE)\ndata <- subset(data, select= -c(X, Path) )\n\nobservations <- summary(data)\n\ndecision_tree = rpart(Box ~ Release.Date+Runtime+MPAA+Budget+FB_likes+YoutubeViews, data=data)\nrpart.plot(decision_tree)\nsummary(decision_tree)\n\ndtypes = c(2,6,8,10,11)\ndnames = names(data)[dtypes]\n\nfor(i in 1:length(dtypes)) {\n  temp = data.frame(data[!is.na(data[dtypes[i]]),dtypes[i]])\n  names(temp) = c('x')\n  tmean = mean(temp$x)\n  tmedian = median(temp$x)\n  \n  p <- ggplot(data = temp, aes(x=x)) + geom_density() + xlab(dnames[i])\n  #p_log <- p + geom_vline(xintercept = sumx, colour=c('red', 'green', 'blue', 'magenta', 'yellow', 'orange')) + scale_x_log10()\n  p_log <- p + geom_vline(xintercept = tmean, color='green') + geom_vline(xintercept = tmedian, color='blue') + scale_x_log10()\n  plot(p)\n  plot(p_log)\n}\n\nftypes = c(3,4,5,7,9)\nfnames = names(data)[ftypes]\n\nthres=20 # 只列出前二十名，太多也看不完\nfor(i in 1:length(ftypes)) {\n  counts <- count(data[!is.na(data[ftypes[i]]),ftypes[i]])\n  counts <- counts[order(counts$freq, decreasing = TRUE),]\n  if(nrow(counts)>thres) counts <- counts[1:thres,]\n  names(counts) <- c('x', 'freq')\n  p <- ggplot(data = counts, aes(x=reorder(x, -freq), y=freq)) + geom_bar(stat = \"identity\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')\n  #p <- ggplot(data = counts, aes(x=x, y=freq)) + geom_bar(stat = \"identity\") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(fnames[i]) + ylab('Frequency')\n  plot(p)\n}\n\nmovie_aov <- aov(data = data, Box ~ Runtime * Budget * FB_likes * YoutubeViews )\nsummary_movie_aov <- summary(movie_aov)\nsummary_movie_aov\n## 測試的結果： Box ~ Budge (預算會影響票房)\n## 因為 p < 0.05\n## 而不能確定 Box ~ YoutubeViews  (Youtube 播放數對票房)\n## 還有       Box ~ FB_likes      (FB 按讚數對票房)\n## 還有       Box ~ Runtime       (電影長度對票房)\n## 個別的影響，因為 \n## FB_likes:YoutubeViews, FB_likes:Runtime, FB_likes:YoutubeViews:Runtime\n## 是顯著的，所以我們只能假設，FB 按讚數、Youtube 瀏覽數、電影時長的組合，會影響電影票房\n",
    "created" : 1497402348614.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2025417931",
    "id" : "161C69DD",
    "lastKnownWriteTime" : 1497629842,
    "last_content_update" : 1497629842045,
    "path" : "~/Movie_DF/Experiments.R",
    "project_path" : "Experiments.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}