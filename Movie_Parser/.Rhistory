source('~/Movie_Parser/DownloadPkg_0.R')
source('~/Movie_Parser/DownloadPkg_0.R')
source('~/Movie_Parser/UrlParser_1.R')
source('~/Movie_Parser/UrlParser_1.R')
source('~/Movie_Parser/MovieContent_2.R')
source('~/Movie_Parser/MovieContent_2.R')
names(testframe) = c("Title","Path","Box")
#Post-processing and sorting
testframe$Box = substring(testframe$Box,2)
testframe$Box = gsub(",","",testframe$Box)
testframe$Box = as.numeric(testframe$Box)
testframe = testframe[order(testframe$Box,decreasing=TRUE),]
write.csv(testframe,"testcsv.csv")
source('~/Movie_Parser/UrlParser_1.R')
source('~/Movie_Parser/SocialNet_3.R')
source('~/Movie_Parser/UrlParser_1.R')
#Post-processing
fulldata$Runtime = gsub(" hrs. ",":",fulldata$Runtime)
fulldata$Runtime = gsub(" min.",":00",fulldata$Runtime)
fulldata$Runtime = chron::times(fulldata$Runtime)
fulldata$Runtime = chron::hours(fulldata$Runtime)*60 + minutes(fulldata$Runtime)
fulldata$'Release Date' = gsub(",","",fulldata$'Release Date')
fulldata$'Release Date' = gsub(" |[0-9]","",fulldata$'Release Date')
fulldata$Budget = substring(fulldata$Budget,2)
fulldata$Budget = gsub(" million","",fulldata$Budget)
fulldata$Budget = as.numeric(fulldata$Budget)
write.csv(fulldata,"Fulllist.csv")
View(fulldata)
source('~/Movie_Parser/SocialNet_3.R')
View(alldata)
View(fulldata)
appid = '226479917810367'
tok = '6243842d41be00731620a88be6747500'
fb_oath = fbOAuth(appid, tok, extended_permissions=TRUE,  legacy_permissions=TRUE)
require(Rfacebook)
appid = '226479917810367'
tok = '6243842d41be00731620a88be6747500'
fb_oath = fbOAuth(appid, tok, extended_permissions=TRUE,  legacy_permissions=TRUE)
appid = '226479917810367'
tok = '6243842d41be00731620a88be6747500'
fb_oath = fbOAuth(appid, tok)
rm(list=ls(all=TRUE))
library(XML)
library(bitops)
library(RCurl)
library(NLP)
library(httr)
library(chron)
require(Rfacebook)
appid = '226479917810367'
tok = '6243842d41be00731620a88be6747500'
fb_oath = fbOAuth(appid, tok)
alldata = read.csv("Fulllist.csv")
View(alldata)
Rfacebook::searchPages('The Empire Strikes Back', fb_oath, n=3)
Rfacebook::searchPages('The Empire Strikes Back', fb_oath, n=1)
Rfacebook::getPage('105557772811128')
View(Rfacebook::searchPages('The Empire Strikes Back', fb_oath, n=1))
View(Rfacebook::searchPages('Iron Man', fb_oath, n=1))
Rfacebook::searchPages('Iron Man', fb_oath, n=1)
Rfacebook::searchPages('Iron Man', fb_oath, n=1)$likes
t = Rfacebook::searchPages('Iron Man', fb_oath, n=1)
View(t)
t = Rfacebook::searchPages('Iron Man', fb_oath, n=3)
t = Rfacebook::searchPages('Iron Man 3', fb_oath, n=3)
t = Rfacebook::searchPages('Iron Man 3', tok, n=3)
t = Rfacebook::searchPages('Iron Man 3', 'EAACEdEose0cBAB9ueZASm3xIPhk3VMzGduGXN149F0zOopEUtcOnk7bryDA27ZABZAOTDZA6y8ExFvFhoj169FJzkMsScYRh5oZAKlEIDFUytwfAs0A4zpGjQ3ixlZA8U6q23TUH6pnwQCi1o9P1Mu2NAA4bLjm8r1h6UR3oFS9pLSBHWGZAwMgfai8pUfeRX8ZD', n=3)
View(t)
t = Rfacebook::searchPages('Iron Man 3', 'EAACEdEose0cBAB9ueZASm3xIPhk3VMzGduGXN149F0zOopEUtcOnk7bryDA27ZABZAOTDZA6y8ExFvFhoj169FJzkMsScYRh5oZAKlEIDFUytwfAs0A4zpGjQ3ixlZA8U6q23TUH6pnwQCi1o9P1Mu2NAA4bLjm8r1h6UR3oFS9pLSBHWGZAwMgfai8pUfeRX8ZD', n=1)
source('~/Movie_Parser/SocialNet_3.R')
source('~/Movie_Parser/SocialNet_3.R')
source('~/Movie_Parser/SocialNet_3.R')
source('~/Movie_Parser/SocialNet_3.R')
View(fulldata)
source('~/Movie_Parser/SocialNet_3.R')
View(fulldata)
print('done')
source('~/Movie_Parser/Procedure.R')
View(testframe)
View(testframe)
View(tempframe)
source('~/Movie_Parser/MovieList_1.R')
source('~/Movie_Parser/MovieContent_2.R')
View(alldata)
View(fulldata)
View(alldata)
View(fulldata)
source('~/Movie_Parser/MovieContent_2.R')
View(testframe)
source('~/Movie_Parser/MovieContent_2.R')
View(fulldata)
source('~/Movie_Parser/Procedure.R')
source('~/Movie_Parser/Procedure.R')
install.packages(c("XML", "bitops", "RCurl", "NLP", "Rfacebook", "httr", "chron"))
View(fulldata)
View(testframe)
View(fulldata)
View(testframe)
xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[2]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[2]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
yahooURL
View(testframe)
1!=0
substring('hasDirector',0, 8)
substring('hasDirector',0, 9)
substring('Director',0, 9)
substring('Direactor',0, 9)
substring('Direactore',0, 9)
substring('Direactor',0, 9)
substring('Director',0, 8)
substring('Directore',0, 8)
substring('Director:',0, 8)
substring('Director',0, 8)
substring('Directore',0, 8)
help("substring")
substr("abcdef", 2, 4)
substring('123456789',1, 8)
substring('Director',1, 8)
source('~/Movie_Parser/MovieContent_2.R')
source('~/Movie_Parser/MovieContent_2.R')
hasDirector
length(hasDirector)<1
source('~/Movie_Parser/MovieContent_2.R')
for( i in i:length(alldata$X))
{
yahooURL <- paste(orgURL, alldata$Path[i], sep='')
#yahooURL <- iconv(yahooURL, "big5", "utf8")
#Encoding(yahooURL) = "UTF-8"
print(yahooURL)
URLExist = url.exists(yahooURL)
print(URLExist)
if(URLExist)
{
html = getURL(yahooURL, ssl.verifypeer = FALSE, encoding='UTF-8', httpheader = myHttpheader)
xml = htmlParse(html, encoding='UTF-8')
text = xpathSApply(xml, '//tr[@bgcolor="#ffffff"]/td[@valign="top"]/b', sessionEncoding='UTF-8', xmlValue)
if(length(text)<6) next
hasDirector = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[1]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
if(length(hasDirector)<1 || substring(hasDirector,1, 8)!='Director') next
director = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[2]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
if(length(director)<1) next
testframe = data.frame(t(text), director)
names(testframe) = c("Distrubutor","Release Date","Genre","Runtime","MPAA","Budget", "Director")
testframe = cbind(alldata[i,-1],testframe)
fulldata = rbind(fulldata, testframe)
}
}
View(alldata)
View(fulldata)
source('~/Movie_Parser/MovieContent_2.R')
View(fulldata)
source('~/Movie_Parser/MovieContent_2.R')
View(fulldata)
View(alldata)
source('~/Movie_Parser/MovieContent_2.R')
View(fulldata)
source('~/Movie_Parser/MovieContent_2.R')
View(fulldata)
source('~/Movie_Parser/Procedure.R')
View(fulldata)
for( i in i:length(alldata$X))
{
yahooURL <- paste(orgURL, alldata$Path[i], sep='')
#yahooURL <- iconv(yahooURL, "big5", "utf8")
#Encoding(yahooURL) = "UTF-8"
print(yahooURL)
URLExist = url.exists(yahooURL)
print(URLExist)
if(URLExist)
{
html = getURL(yahooURL, ssl.verifypeer = FALSE, encoding='UTF-8', httpheader = myHttpheader)
xml = htmlParse(html, encoding='UTF-8')
text = xpathSApply(xml, '//tr[@bgcolor="#ffffff"]/td[@valign="top"]/b', sessionEncoding='UTF-8', xmlValue)
if (length(text)<6) next
hasDirector = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[1]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
director = NA
if (length(hasDirector) > 0 && substring(hasDirector,1, 8)=='Director') {
director = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[2]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)[1]
}
testframe = data.frame(t(text), director)
names(testframe) = c("Distrubutor","Release Date","Genre","Runtime","MPAA","Budget", "Director")
testframe = cbind(alldata[i,-1],testframe)
fulldata = rbind(fulldata, testframe)
}
}
for( i in i:length(alldata$X))
{
yahooURL <- paste(orgURL, alldata$Path[i], sep='')
#yahooURL <- iconv(yahooURL, "big5", "utf8")
#Encoding(yahooURL) = "UTF-8"
print(yahooURL)
URLExist = url.exists(yahooURL)
print(URLExist)
if(URLExist)
{
html = getURL(yahooURL, ssl.verifypeer = FALSE, encoding='UTF-8', httpheader = myHttpheader)
xml = htmlParse(html, encoding='UTF-8')
text = xpathSApply(xml, '//tr[@bgcolor="#ffffff"]/td[@valign="top"]/b', sessionEncoding='UTF-8', xmlValue)
if (length(text)<6) next
hasDirector = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[1]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)
director = NA
if (length(hasDirector) > 0 && substring(hasDirector,1, 8)=='Director') {
director = xpathSApply(xml, '//td[2]//div[@class="mp_box_content"]//tr[1]//td[2]//font[@size="2"]//text()', sessionEncoding='UTF-8', xmlValue)[1]
}
testframe = data.frame(t(text), director)
names(testframe) = c("Distrubutor","Release Date","Genre","Runtime","MPAA","Budget", "Director")
testframe = cbind(alldata[i,-1],testframe)
fulldata = rbind(fulldata, testframe)
}
}
#Post-processing
fulldata$Runtime = gsub(" hrs. ",":",fulldata$Runtime)
fulldata$Runtime = gsub(" min.",":00",fulldata$Runtime)
fulldata$Runtime = chron::times(fulldata$Runtime)
fulldata$Runtime = chron::hours(fulldata$Runtime)*60 + minutes(fulldata$Runtime)
fulldata$'Release Date' = gsub(",","",fulldata$'Release Date')
fulldata$'Release Date' = gsub(" |[0-9]","",fulldata$'Release Date')
fulldata$Budget = substring(fulldata$Budget,2)
fulldata$Budget = gsub(" million","",fulldata$Budget)
fulldata$Budget = as.numeric(fulldata$Budget)
write.csv(fulldata,"Fulllist.csv")
View(fulldata)
View(alldata)
View(testframe)
help(gsub)
source('~/Movie_Parser/MovieContent_2.R')
source('~/Movie_Parser/Procedure.R')
source('~/Movie_Parser/Procedure.R')
require(XML)
require(bitops)
require(RCurl)
require(httr)
source('./Functions.R')
pureDigit(testframe$Box)
pureDigit(testframe$Box)
for(j in 1996:2017)
{
for(i in 6:10)
{
testurl = paste(yahoourl,i,appendurl_1,j,appendurl_2,sep='')
testexist = url.exists(testurl)
print(testurl)
print(testexist)
if(testexist)
{
html = getURL(testurl, ssl.verifypeer = FALSE, encoding='UTF-8', httpheader = myHttpheader)
xml = htmlParse(html, encoding='UTF-8')
path = xpathSApply(xml,'//table//td[2]/b/font[@size="2"]/a/@href',sessionEncoding='UTF-8')
if(length(path)<1) break
title = xpathSApply(xml,'//table//td[2]/b/font[@size="2"]/a[@href]',sessionEncoding='UTF-8',xmlValue)
if(length(title)<1) break
box = xpathSApply(xml,'//table//td[4]/font[@size="2"]/b',sessionEncoding='UTF-8',xmlValue)
if(length(box)<1) break
testlen = length(path)
if(length(title)!=testlen || length(box)!=testlen) next
tempframe = data.frame(title,path,box)
testframe = rbind(testframe,tempframe)
}
else print(paste("assert: URL:",testurl,"not exist!"))
}
}
pureDigit(testframe$Box)
for(j in 1996:2017)
{
for(i in 6:10)
{
testurl = paste(yahoourl,i,appendurl_1,j,appendurl_2,sep='')
testexist = url.exists(testurl)
print(testurl)
print(testexist)
if(testexist)
{
html = getURL(testurl, ssl.verifypeer = FALSE, encoding='UTF-8', httpheader = myHttpheader)
xml = htmlParse(html, encoding='UTF-8')
path = xpathSApply(xml,'//table//td[2]/b/font[@size="2"]/a/@href',sessionEncoding='UTF-8')
if(length(path)<1) break
title = xpathSApply(xml,'//table//td[2]/b/font[@size="2"]/a[@href]',sessionEncoding='UTF-8',xmlValue)
if(length(title)<1) break
box = xpathSApply(xml,'//table//td[4]/font[@size="2"]/b',sessionEncoding='UTF-8',xmlValue)
if(length(box)<1) break
testlen = length(path)
if(length(title)!=testlen || length(box)!=testlen) next
tempframe = data.frame(title,path,box)
testframe = rbind(testframe,tempframe)
}
else print(paste("assert: URL:",testurl,"not exist!"))
}
}
View(tempframe)
pureDigit(testframe$Box)
pureDigit(testframe$box)
source('~/Movie_Parser/SocialNet_3.R')
source('~/Movie_Parser/SocialNet_3.R')
View(fulldata)
